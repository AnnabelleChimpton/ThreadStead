import { randomBytes } from 'crypto';
import { db } from './db';

export interface BetaInviteCode {
  id: string;
  code: string;
  generatedBy: string;
  usedBy: string | null;
  createdAt: Date;
  usedAt: Date | null;
  generator?: {
    id: string;
    primaryHandle: string | null;
    profile?: {
      displayName: string | null;
    } | null;
  };
  user?: {
    id: string;
    primaryHandle: string | null;
    profile?: {
      displayName: string | null;
    } | null;
  } | null;
}

/**
 * Generate a unique beta invite code
 */
export function generateBetaInviteCode(): string {
  // Generate a readable code like "BETA-ABCD-EFGH-IJKL" 
  const part1 = randomBytes(2).toString('hex').toUpperCase();
  const part2 = randomBytes(2).toString('hex').toUpperCase();
  const part3 = randomBytes(2).toString('hex').toUpperCase();
  return `BETA-${part1}-${part2}-${part3}`;
}

/**
 * Generate 5 beta invite codes for a new user
 */
export async function generateUserBetaInviteCodes(userId: string): Promise<BetaInviteCode[]> {
  const codes: string[] = [];
  
  // Generate 5 unique codes
  for (let i = 0; i < 5; i++) {
    let code: string;
    let attempts = 0;
    
    do {
      code = generateBetaInviteCode();
      attempts++;
      
      // Prevent infinite loop
      if (attempts > 100) {
        throw new Error('Unable to generate unique beta invite code after 100 attempts');
      }
      
      // Check if code already exists
      const existing = await db.betaInviteCode.findUnique({ where: { code } });
      if (!existing) {
        codes.push(code);
        break;
      }
    } while (true);
  }
  
  // Insert all codes in a transaction
  const createdCodes = await db.$transaction(
    codes.map(code => 
      db.betaInviteCode.create({
        data: {
          code,
          generatedBy: userId,
        }
      })
    )
  );
  
  return createdCodes;
}

/**
 * Get all beta invite codes generated by a user
 */
export async function getUserBetaInviteCodes(userId: string): Promise<BetaInviteCode[]> {
  return await db.betaInviteCode.findMany({
    where: {
      generatedBy: userId
    },
    include: {
      user: {
        select: {
          id: true,
          primaryHandle: true,
          profile: {
            select: {
              displayName: true
            }
          }
        }
      }
    },
    orderBy: {
      createdAt: 'asc'
    }
  });
}

/**
 * Check if a beta invite code is valid and not used
 */
export async function validateBetaInviteCode(code: string): Promise<BetaInviteCode | null> {
  const inviteCode = await db.betaInviteCode.findUnique({
    where: { code },
    include: {
      generator: {
        select: {
          id: true,
          primaryHandle: true,
          profile: {
            select: {
              displayName: true
            }
          }
        }
      }
    }
  });
  
  if (!inviteCode || inviteCode.usedBy) {
    return null;
  }
  
  return inviteCode;
}

/**
 * Mark a beta invite code as used
 */
export async function markBetaInviteCodeAsUsed(code: string, userId: string): Promise<boolean> {
  try {
    await db.betaInviteCode.update({
      where: { code },
      data: {
        usedBy: userId,
        usedAt: new Date()
      }
    });
    return true;
  } catch {
    return false;
  }
}

/**
 * Check if a beta invite code can be used for registration
 * This checks both the traditional BetaKey system and the new BetaInviteCode system
 */
export async function checkBetaAccess(betaKey?: string): Promise<{ valid: boolean; type?: 'admin' | 'invite'; error?: string }> {
  const betaEnabled = process.env.BETA_KEYS_ENABLED === "true";
  
  if (!betaEnabled) {
    return { valid: true };
  }
  
  if (!betaKey) {
    return { valid: false, error: "Beta key required for account creation" };
  }
  
  // First check if it's a traditional admin beta key
  const adminBetaKey = await db.betaKey.findUnique({ 
    where: { key: betaKey } 
  });
  
  if (adminBetaKey) {
    if (adminBetaKey.usedBy) {
      return { valid: false, error: "Beta key has already been used" };
    }
    return { valid: true, type: 'admin' };
  }
  
  // Then check if it's a user-generated beta invite code
  const inviteCode = await validateBetaInviteCode(betaKey);
  if (inviteCode) {
    return { valid: true, type: 'invite' };
  }
  
  return { valid: false, error: "Invalid beta key" };
}

/**
 * Consume a beta key/invite code for user registration
 */
export async function consumeBetaAccess(betaKey: string, userId: string): Promise<{ success: boolean; error?: string }> {
  try {
    // First check if it's a traditional admin beta key
    const adminBetaKey = await db.betaKey.findUnique({ 
      where: { key: betaKey } 
    });
    
    if (adminBetaKey) {
      if (adminBetaKey.usedBy) {
        return { success: false, error: "Beta key has already been used" };
      }
      
      await db.betaKey.update({
        where: { key: betaKey },
        data: { 
          usedBy: userId,
          usedAt: new Date()
        }
      });
      
      return { success: true };
    }
    
    // Then try beta invite code
    const inviteCode = await validateBetaInviteCode(betaKey);
    if (inviteCode) {
      const success = await markBetaInviteCodeAsUsed(betaKey, userId);
      if (success) {
        return { success: true };
      } else {
        return { success: false, error: "Failed to use beta invite code" };
      }
    }
    
    return { success: false, error: "Invalid beta key" };
  } catch {
    return { success: false, error: "Database error occurred" };
  }
}