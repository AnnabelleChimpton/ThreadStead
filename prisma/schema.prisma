generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String             @id @default(cuid())
  did                       String             @unique
  createdAt                 DateTime           @default(now())
  primaryHandle             String?
  publicBaseUrl             String?
  sharedBaseUrl             String?
  privateBaseUrl            String?
  role                      UserRole           @default(member)
  emailVerifiedAt           DateTime?
  encryptedEmail            String?
  betaKey                   BetaKey?
  capabilities              CapabilityGrant[]
  comments                  Comment[]          @relation("UserComments")
  followers                 Follow[]           @relation("follows_followee")
  following                 Follow[]           @relation("follows_follower")
  guestbook                 GuestbookEntry[]   @relation("EntriesToOwner")
  handles                   Handle[]
  media                     Media[]
  notificationsActedOn      Notification[]     @relation("NotificationActor")
  notificationsReceived     Notification[]     @relation("NotificationRecipient")
  photoComments             PhotoComment[]     @relation("PhotoCommentAuthor")
  installs                  PluginInstall[]
  posts                     Post[]
  postThreadRingAdditions   PostThreadRing[]   @relation("PostThreadRingAdditions")
  profile                   Profile?
  ringHubOwnerships         RingHubOwnership[] @relation("RingHubOwnerships")
  sessions                  Session[]
  curatedThreadRings        ThreadRing[]       @relation("ThreadRingCurator")
  threadRingBlocksReceived  ThreadRingBlock[]  @relation("ThreadRingBlockedUsers")
  threadRingBlocksCreated   ThreadRingBlock[]  @relation("ThreadRingBlockCreators")
  threadRingForks           ThreadRingFork[]   @relation("ThreadRingForks")
  threadRingInvitesReceived ThreadRingInvite[] @relation("ThreadRingInvitationsReceived")
  threadRingInvitesSent     ThreadRingInvite[] @relation("ThreadRingInvitationsSent")
  threadRingMemberships     ThreadRingMember[] @relation("ThreadRingMemberships")
  reportsCreated            UserReport[]       @relation("UserReportsCreated")
  reportsReceived           UserReport[]       @relation("UserReportsReceived") 
  reportsReviewed           UserReport[]       @relation("UserReportsReviewed")
  blocksCreated             UserBlock[]        @relation("UserBlocksCreated")
  blocksReceived            UserBlock[]        @relation("UserBlocksReceived")
  betaInviteCodesGenerated  BetaInviteCode[]   @relation("BetaInviteCodesGenerated")
  betaInviteCodesUsed       BetaInviteCode[]   @relation("BetaInviteCodesUsed")
  emojisCreated             Emoji[]            @relation("EmojiCreator")
}

model Handle {
  id         String    @id @default(cuid())
  userId     String
  handle     String
  host       String
  verifiedAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([handle, host])
}

model Profile {
  id                 String       @id @default(cuid())
  userId             String       @unique
  displayName        String?
  bio                String?
  avatarUrl          String?
  bannerUrl          String?
  customCSS          String?
  blogroll           Json?
  visibility         Visibility   @default(public)
  updatedAt          DateTime     @updatedAt
  featuredFriends    Json?
  avatarFullUrl      String?
  avatarMediumUrl    String?
  avatarThumbnailUrl String?
  customTemplate     String?
  customTemplateAst  String?
  hideNavigation     Boolean      @default(false)
  templateEnabled    Boolean      @default(false)
  templateMode       TemplateMode @default(default)
  badgePreferences   Json?
  includeSiteCSS     Boolean      @default(true)
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id                String           @id @default(cuid())
  authorId          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?
  bodyHtml          String?
  bodyText          String?
  media             Json?
  tags              String[]
  visibility        Visibility       @default(public)
  bodyMarkdown      String?
  title             String           @default("Untitled Post")
  intent            PostIntent?
  excerpt           String?
  platform          String?          @default("blog")
  publishedAt       DateTime?
  textPreview       String?
  contentWarning    String?          // Custom spoiler warning text
  isSpoiler         Boolean          @default(false) // Quick flag for filtering
  threadRingPostIds Json?            // Store ThreadRing database UUIDs mapped by ring slug
  comments          Comment[]        @relation("PostComments")
  author            User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  threadRings       PostThreadRing[] @relation("PostThreadRings")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  postId    String
  authorId  String
  status    CommentStatus @default(visible)
  parentId  String?
  author    User          @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]     @relation("CommentReplies")
  post      Post          @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
}

model GuestbookEntry {
  id           String   @id @default(cuid())
  profileOwner String
  authorId     String?
  message      String
  createdAt    DateTime @default(now())
  status       String   @default("visible")
  signature    String?
  owner        User     @relation("EntriesToOwner", fields: [profileOwner], references: [id], onDelete: Cascade)
}

model PluginInstall {
  id        String   @id @default(cuid())
  ownerId   String
  pluginId  String
  mode      String
  settings  Json?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  secret    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailLoginToken {
  id             String         @id @default(cuid())
  token          String         @unique
  encryptedEmail String
  expiresAt      DateTime
  usedAt         DateTime?
  createdAt      DateTime       @default(now())
  type           EmailTokenType @default(login)
  userId         String?

  @@index([token])
  @@index([encryptedEmail, expiresAt])
  @@index([userId, type])
}

model CapabilityGrant {
  id        String   @id @default(cuid())
  userId    String
  audience  String
  actions   String[]
  resource  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId String
  followeeId String
  status     String   @default("accepted")
  createdAt  DateTime @default(now())
  followee   User     @relation("follows_followee", fields: [followeeId], references: [id], onDelete: Cascade)
  follower   User     @relation("follows_follower", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
}

model BetaKey {
  id        String    @id @default(cuid())
  key       String    @unique
  usedBy    String?   @unique
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User?     @relation(fields: [usedBy], references: [id])
}

model BetaInviteCode {
  id          String    @id @default(cuid())
  code        String    @unique
  generatedBy String
  usedBy      String?
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
  generator   User      @relation("BetaInviteCodesGenerated", fields: [generatedBy], references: [id], onDelete: Cascade)
  user        User?     @relation("BetaInviteCodesUsed", fields: [usedBy], references: [id], onDelete: SetNull)

  @@index([generatedBy])
  @@index([code])
}

model Notification {
  id          String             @id @default(cuid())
  recipientId String
  actorId     String
  type        NotificationType
  status      NotificationStatus @default(unread)
  data        Json?
  createdAt   DateTime           @default(now())
  readAt      DateTime?
  actor       User               @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  recipient   User               @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId, status, createdAt])
  @@index([recipientId, actorId, type])
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model CustomPage {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String
  content    String
  published  Boolean  @default(false)
  showInNav  Boolean  @default(false)
  navOrder   Int      @default(0)
  navDropdown String?  // Which dropdown menu (e.g., "discovery", "help", null for top-level)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hideNavbar Boolean  @default(false)
  isHomepage Boolean  @default(false)

  @@index([published, showInNav, navOrder])
  @@index([isHomepage])
  @@index([navDropdown])
}

model Media {
  id            String         @id @default(cuid())
  userId        String
  caption       String?
  title         String?
  thumbnailUrl  String
  mediumUrl     String
  fullUrl       String
  originalName  String?
  fileSize      Int?
  mimeType      String?
  width         Int?
  height        Int?
  featured      Boolean        @default(false)
  featuredOrder Int?
  visibility    Visibility     @default(public)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      PhotoComment[]

  @@index([userId, featured, featuredOrder])
  @@index([userId, createdAt])
  @@index([userId, visibility])
}

model PhotoComment {
  id        String         @id @default(cuid())
  content   String
  createdAt DateTime       @default(now())
  mediaId   String
  authorId  String
  parentId  String?
  status    CommentStatus  @default(visible)
  author    User           @relation("PhotoCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  media     Media          @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  parent    PhotoComment?  @relation("PhotoCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   PhotoComment[] @relation("PhotoCommentReplies")

  @@index([mediaId, createdAt])
  @@index([authorId, createdAt])
  @@index([parentId])
}

model ThreadRing {
  id                    String               @id @default(cuid())
  uri                   String               @unique
  curatorId             String
  name                  String
  slug                  String               @unique
  description           String?
  joinType              ThreadRingJoinType   @default(open)
  visibility            ThreadRingVisibility @default(public)
  memberCount           Int                  @default(1)
  postCount             Int                  @default(0)
  currentPrompt         String?
  curatorNote           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  directChildrenCount   Int                  @default(0)
  isSystemRing          Boolean              @default(false)
  lineageDepth          Int                  @default(0)
  lineagePath           String               @default("")
  parentId              String?
  totalDescendantsCount Int                  @default(0)
  posts                 PostThreadRing[]
  curator               User                 @relation("ThreadRingCurator", fields: [curatorId], references: [id], onDelete: Cascade)
  parent                ThreadRing?          @relation("ThreadRingHierarchy", fields: [parentId], references: [id])
  children              ThreadRing[]         @relation("ThreadRingHierarchy")
  badge                 ThreadRingBadge?
  blocks                ThreadRingBlock[]    @relation("ThreadRingBlocks")
  userBlocks            UserBlock[]          @relation("UserBlockedThreadRings")
  childFork             ThreadRingFork?      @relation("ThreadRingChild")
  parentForks           ThreadRingFork[]     @relation("ThreadRingParent")
  invites               ThreadRingInvite[]
  members               ThreadRingMember[]

  @@index([curatorId])
  @@index([slug])
  @@index([uri])
  @@index([visibility, joinType])
  @@index([memberCount, postCount])
  @@index([parentId])
  @@index([lineageDepth])
  @@index([isSystemRing])
}

model ThreadRingMember {
  id           String         @id @default(cuid())
  threadRingId String
  userId       String
  role         ThreadRingRole @default(member)
  joinedAt     DateTime       @default(now())
  threadRing   ThreadRing     @relation(fields: [threadRingId], references: [id], onDelete: Cascade)
  user         User           @relation("ThreadRingMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadRingId, userId])
  @@index([userId])
  @@index([threadRingId, role])
}

model PostThreadRing {
  id           String     @id @default(cuid())
  postId       String
  threadRingId String
  addedAt      DateTime   @default(now())
  addedBy      String
  isPinned     Boolean    @default(false)
  pinnedAt     DateTime?
  pinnedBy     String?
  addedByUser  User       @relation("PostThreadRingAdditions", fields: [addedBy], references: [id], onDelete: Cascade)
  post         Post       @relation("PostThreadRings", fields: [postId], references: [id], onDelete: Cascade)
  threadRing   ThreadRing @relation(fields: [threadRingId], references: [id], onDelete: Cascade)

  @@unique([postId, threadRingId])
  @@index([threadRingId, addedAt])
  @@index([threadRingId, isPinned, pinnedAt])
  @@index([postId])
}

model ThreadRingInvite {
  id           String                 @id @default(cuid())
  threadRingId String
  inviterId    String
  inviteeId    String
  status       ThreadRingInviteStatus @default(pending)
  createdAt    DateTime               @default(now())
  respondedAt  DateTime?
  invitee      User                   @relation("ThreadRingInvitationsReceived", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviter      User                   @relation("ThreadRingInvitationsSent", fields: [inviterId], references: [id], onDelete: Cascade)
  threadRing   ThreadRing             @relation(fields: [threadRingId], references: [id], onDelete: Cascade)

  @@unique([threadRingId, inviteeId])
  @@index([inviteeId, status])
  @@index([threadRingId])
}

model ThreadRingFork {
  id            String     @id @default(cuid())
  parentId      String
  childId       String     @unique
  createdBy     String
  forkReason    String?
  createdAt     DateTime   @default(now())
  child         ThreadRing @relation("ThreadRingChild", fields: [childId], references: [id], onDelete: Cascade)
  createdByUser User       @relation("ThreadRingForks", fields: [createdBy], references: [id], onDelete: Cascade)
  parent        ThreadRing @relation("ThreadRingParent", fields: [parentId], references: [id], onDelete: Cascade)

  @@index([parentId])
  @@index([createdBy])
}

model ThreadRingBadge {
  id              String     @id @default(cuid())
  threadRingId    String     @unique
  title           String
  subtitle        String?
  imageUrl        String?
  templateId      String?
  backgroundColor String     @default("#4A90E2")
  textColor       String     @default("#FFFFFF")
  isGenerated     Boolean    @default(true)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  threadRing      ThreadRing @relation(fields: [threadRingId], references: [id], onDelete: Cascade)

  @@index([threadRingId])
  @@index([isActive])
}

model ThreadRingBlock {
  id              String              @id @default(cuid())
  threadRingId    String
  blockedUserId   String?
  blockedInstance String?
  blockedActorUri String?
  blockType       ThreadRingBlockType
  reason          String?
  createdBy       String
  createdAt       DateTime            @default(now())
  blockedUser     User?               @relation("ThreadRingBlockedUsers", fields: [blockedUserId], references: [id], onDelete: Cascade)
  createdByUser   User                @relation("ThreadRingBlockCreators", fields: [createdBy], references: [id], onDelete: Cascade)
  threadRing      ThreadRing          @relation("ThreadRingBlocks", fields: [threadRingId], references: [id], onDelete: Cascade)

  @@unique([threadRingId, blockedUserId])
  @@unique([threadRingId, blockedInstance])
  @@unique([threadRingId, blockedActorUri])
  @@index([threadRingId, blockType])
  @@index([blockedUserId])
  @@index([blockedInstance])
  @@index([createdBy])
}

model RingHubOwnership {
  id          String   @id @default(cuid())
  ringSlug    String   @unique
  ringUri     String
  ownerUserId String
  serverDID   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("RingHubOwnerships", fields: [ownerUserId], references: [id], onDelete: Cascade)

  @@index([ownerUserId])
  @@index([serverDID])
}

model UserReport {
  id              String       @id @default(cuid())
  reporterId      String
  reportedUserId  String?
  reportType      ReportType
  targetId        String       // ID of the reported content (post, comment, etc.)
  reason          ReportReason
  customReason    String?
  description     String?
  status          ReportStatus @default(pending)
  reviewedBy      String?
  reviewedAt      DateTime?
  resolution      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  reporter        User         @relation("UserReportsCreated", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser    User?        @relation("UserReportsReceived", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reviewer        User?        @relation("UserReportsReviewed", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([status, createdAt])
  @@index([targetId, reportType])
  @@index([reviewedBy])
}

model UserBlock {
  id                  String      @id @default(cuid())
  blockerId           String
  blockedUserId       String?
  blockedThreadRingId String?
  reason              String?
  createdAt           DateTime    @default(now())
  blocker             User        @relation("UserBlocksCreated", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedUser         User?       @relation("UserBlocksReceived", fields: [blockedUserId], references: [id], onDelete: Cascade)
  blockedThreadRing   ThreadRing? @relation("UserBlockedThreadRings", fields: [blockedThreadRingId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedUserId])
  @@unique([blockerId, blockedThreadRingId])
  @@index([blockerId])
  @@index([blockedUserId])
  @@index([blockedThreadRingId])
}

enum Visibility {
  public
  followers
  friends
  private
}

enum TemplateMode {
  default
  enhanced
  advanced
}

enum UserRole {
  member
  admin
}

enum PostIntent {
  sharing
  asking
  feeling
  announcing
  showing
  teaching
  looking
  celebrating
  recommending
}

enum CommentStatus {
  visible
  hidden
}

enum EmailTokenType {
  login
  verification
}

enum NotificationType {
  comment
  reply
  follow
  friend
  guestbook
  photo_comment
  photo_reply
  threadring_invite
  threadring_join
  threadring_post
  threadring_fork
}

enum NotificationStatus {
  unread
  read
  dismissed
}

enum ThreadRingJoinType {
  open
  invite
  closed
}

enum ThreadRingVisibility {
  public
  unlisted
  private
}

enum ThreadRingRole {
  member
  moderator
  curator
}

enum ThreadRingInviteStatus {
  pending
  accepted
  declined
  revoked
}

enum BadgeTemplate {
  classic_blue
  retro_green
  sunset_orange
  midnight_purple
  matrix_green
  neon_pink
  vintage_brown
  cyber_teal
}

enum ThreadRingBlockType {
  user
  instance
  actor
}

enum ReportType {
  user
  post
  comment
  threadring
  guestbook_entry
  photo_comment
}

enum ReportStatus {
  pending
  reviewed
  resolved
  dismissed
}

enum ReportReason {
  spam
  harassment
  hate_speech
  violence
  misinformation
  sexual_content
  copyright
  other
}

model Emoji {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  creator   User     @relation("EmojiCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([createdBy])
}
