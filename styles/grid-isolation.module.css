/**
 * Grid Isolation Styles
 * Provides isolated CSS Grid styles that don't interfere with user CSS
 */

/* Grid container isolation */
.gridContainer {
  /* Establish grid context with isolation */
  display: grid;
  isolation: isolate;

  /* Default grid structure */
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: repeat(auto-fit, minmax(60px, auto));
  gap: 16px;

  /* Ensure proper box-sizing */
  box-sizing: border-box;

  /* Prevent interference with user styles */
  contain: layout style;

  /* Reset potential conflicts */
  position: relative;
  z-index: auto;
}

/* Grid item base styles */
.gridItem {
  /* Ensure proper box-sizing for grid items */
  box-sizing: border-box;

  /* Default positioning within grid cell */
  align-self: stretch;
  justify-self: stretch;

  /* Prevent overflow issues */
  min-width: 0;
  min-height: 0;

  /* Isolate from parent context */
  isolation: isolate;
}

/* Responsive grid item */
.gridItemResponsive {
  composes: gridItem;

  /* Responsive sizing */
  width: 100%;
  height: 100%;

  /* Maintain aspect ratio when needed */
  object-fit: contain;
}

/* Fixed size grid item */
.gridItemFixed {
  composes: gridItem;

  /* Maintain original sizing */
  width: auto;
  height: auto;

  /* Center within grid cell */
  align-self: center;
  justify-self: center;
}

/* Overlay grid item (absolute positioned) */
.gridItemOverlay {
  /* Remove from grid flow */
  position: absolute;
  z-index: 10;

  /* Default overlay positioning */
  top: 0;
  left: 0;

  /* Ensure proper isolation */
  isolation: isolate;
}

/* Grid span utilities */
.span1 { grid-column: span 1; }
.span2 { grid-column: span 2; }
.span3 { grid-column: span 3; }
.span4 { grid-column: span 4; }
.span5 { grid-column: span 5; }
.span6 { grid-column: span 6; }
.span7 { grid-column: span 7; }
.span8 { grid-column: span 8; }
.span9 { grid-column: span 9; }
.span10 { grid-column: span 10; }
.span11 { grid-column: span 11; }
.span12 { grid-column: span 12; }

/* Row span utilities */
.rowSpan1 { grid-row: span 1; }
.rowSpan2 { grid-row: span 2; }
.rowSpan3 { grid-row: span 3; }
.rowSpan4 { grid-row: span 4; }

/* Aspect ratio preservation */
.aspectSquare {
  aspect-ratio: 1 / 1;
}

.aspectVideo {
  aspect-ratio: 16 / 9;
}

.aspectPhoto {
  aspect-ratio: 4 / 3;
}

.aspectPolaroid {
  aspect-ratio: 5 / 6;
}

/* Grid-safe component wrappers */
.componentWrapper {
  /* Base wrapper styles */
  box-sizing: border-box;
  position: relative;

  /* Ensure proper isolation */
  isolation: isolate;

  /* Handle overflow properly */
  overflow: visible;
}

.componentWrapperAdaptive {
  composes: componentWrapper;

  /* Adaptive sizing for grid */
  width: 100%;
  height: 100%;

  /* Flexible content fitting */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* Visual feedback for development */
.gridDebug {
  outline: 1px dashed rgba(59, 130, 246, 0.3);
  background: rgba(59, 130, 246, 0.05);
}

.gridDebug::before {
  content: attr(data-grid-component);
  position: absolute;
  top: 0;
  left: 0;
  font-size: 10px;
  color: rgba(59, 130, 246, 0.7);
  background: rgba(255, 255, 255, 0.9);
  padding: 2px 4px;
  z-index: 1000;
  pointer-events: none;
}

/* Responsive grid container adjustments */
@media (max-width: 768px) {
  .gridContainer {
    grid-template-columns: repeat(6, 1fr);
    gap: 12px;
  }
}

@media (max-width: 480px) {
  .gridContainer {
    grid-template-columns: repeat(4, 1fr);
    gap: 8px;
  }
}

/* Animation support for grid transitions */
.gridTransition {
  transition: grid-column 0.3s ease, grid-row 0.3s ease;
}

/* Prevent grid bleed into user content */
.userContentIsolation {
  /* Create new stacking context */
  isolation: isolate;

  /* Reset grid-related properties */
  display: initial;
  grid: initial;
  grid-area: initial;
  grid-column: initial;
  grid-row: initial;

  /* Ensure user content flows normally */
  position: static;
  z-index: auto;

  /* Reset any inherited grid properties */
  align-items: initial;
  justify-items: initial;
  align-content: initial;
  justify-content: initial;
  gap: initial;
  grid-gap: initial;
}

/* Grid container scope isolation */
.gridScope {
  /* Establish new grid formatting context */
  display: grid;
  isolation: isolate;

  /* Prevent inheritance of grid properties */
  grid-template-columns: initial;
  grid-template-rows: initial;
  grid-template-areas: initial;
  grid-auto-columns: initial;
  grid-auto-rows: initial;
  grid-auto-flow: initial;

  /* Default safe values */
  box-sizing: border-box;
  position: relative;
}

/* Component isolation wrapper */
.componentIsolation {
  /* Isolate component from grid context */
  all: unset;
  display: block;
  box-sizing: border-box;

  /* Restore essential layout properties */
  position: relative;
  z-index: auto;

  /* Prevent grid property inheritance */
  grid: none;
  grid-area: auto;
}

/* Grid item normalization */
.gridItemNormalized {
  /* Ensure consistent grid item behavior */
  contain: layout;
  box-sizing: border-box;
  min-width: 0;
  min-height: 0;

  /* Prevent content overflow */
  overflow: hidden;

  /* Default grid item alignment */
  align-self: stretch;
  justify-self: stretch;
}